'''
    Pentagonal numbers are generated by the formula, Pn=n*(3n-1)/2. The first ten pentagonal numbers are:
        1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
    It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 - 22 = 48, is not pentagonal.

    Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference is pentagonal and D = |Pk - Pj| is minimised; what is the  
    value of D?
'''

from __future__ import division
from math import sqrt


# Produces pairs of Pentagonal numbers
def makePentagonals(bound):
    retList = []
    for i in range(1, bound + 1):
            retList.append(i*(3*i-1)/2)
    return retList

def isPentagonal(p):
    checkNum = (1 + sqrt(1 + 24*p))/6
    return int(checkNum) == checkNum 
    
# First just FIND a pair satisfying the conditions of the theorem
M = 5000
testList = makePentagonals(bound = M)

found = False
for i in range(1, M + 1):
    for j in range(1, i):  
        if isPentagonal(testList[i-1] + testList[j-1]) and isPentagonal(testList[i-1] - testList[j-1]):
            found = True   # You found one!
            firstData = (i, j)
    if found == True:
        break
    
i, j = firstData[0], firstData[1]
print "Found Pair %i, %i, as pentagonals %i and %i" % (testList[i-1], testList[j-1], i, j)
print testList[i-1] - testList[j-1]
    
# Use this pair to compute a search bound
# Uses the inequality |Pn - Pm| >= 3*max(n,m) + 1
M = int((abs(testList[i-1] - testList[j-1]) + 1)/3 + 1)
print "Search bound: ", M
testList = makePentagonals(bound = M)

ansList = []
for i in range(1, M + 1):
    for j in range(1, i): 
        if isPentagonal(testList[i-1] + testList[j-1]) and isPentagonal(testList[i-1] - testList[j-1]):
            ansList.append((i, j))

print "*****************"
print ansList
print "*****************"

penList = [(testList[i-1], testList[j-1]) for (i,j) in ansList]
print penList
print "*****************"

diffList = [abs(T[1] - T[0]) for T in penList]
print diffList


              
            
